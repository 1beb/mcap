var searchIndex = JSON.parse('{\
"conformance_reader":{"doc":"","t":[5,5,5],"n":["as_json","main","transform_record_field"],"q":["conformance_reader","",""],"d":["","",""],"i":[0,0,0],"f":[[1,2],[[]],[2,2]],"p":[[4,"Record"],[4,"Value"]]},\
"mcap":{"doc":"Rust MCAP reading library","t":[0,0,0,0,6,13,13,13,13,13,4,3,13,17,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,4,8,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,12,3,13,13,3,3,13,13,3,13,13,3,13,13,3,13,13,6,3,13,13,3,13,13,3,13,13,3,3,13,13,3,13,13,3,13,13,3,13,13,4,4,3,13,13,3,13,13,3,13,13,6,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,5,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["lexer","parse","record_iterator","records","AttachmentContentHandler","CalledReadInCallback","Exhausted","IO","InvalidOpcode","InvalidStartMagic","LexError","Lexer","Lost","MAGIC","ParseError","RecordTooLargeForArchitecture","TruncatedMidRecord","UnrecognizedCompression","borrow","borrow","borrow_mut","borrow_mut","expect_start_magic","fmt","fmt","from","from","from","from","from","into","into","new","read_next","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_attachment_content_handler","0","0","0","0","0","0","0","1","1","DataTooShort","OpCodeNotImplemented","ParseError","Parseable","Parser","StringEncoding","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from","get","get_byte_array","get_long_byte_array","into","into","into_inner","new","parse_from_front","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","RecordIterator","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","0","Attachment","Attachment","Attachment","AttachmentHeader","AttachmentIndex","AttachmentIndex","AttachmentIndex","Channel","Channel","Channel","Chunk","Chunk","Chunk","ChunkIndex","ChunkIndex","ChunkIndex","CowStr","DataEnd","DataEnd","DataEnd","Footer","Footer","Footer","Header","Header","Header","InvalidOpcode","Message","Message","Message","MessageIndex","MessageIndex","MessageIndex","Metadata","Metadata","Metadata","MetadataIndex","MetadataIndex","MetadataIndex","OpCode","Record","Schema","Schema","Schema","Statistics","Statistics","Statistics","SummaryOffset","SummaryOffset","SummaryOffset","Timestamp","UserOpcode","attachment_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_count","channel_id","channel_id","channel_message_counts","chunk_count","chunk_length","chunk_start_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compressed_size","compression","compression","crc","create_time","create_time","create_time","data","data","data","data_len","data_section_crc","data_size","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","group_length","group_opcode","group_start","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","into_static","length","length","library","log_time","log_time","log_time","log_time","media_type","media_type","media_type","message_count","message_encoding","message_end_time","message_end_time","message_end_time","message_index_length","message_index_offsets","message_start_time","message_start_time","message_start_time","metadata","metadata","metadata_count","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","offset","offset","opcode","parse_record","profile","publish_time","records","records","schema_count","schema_id","sequence","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","summary_crc","summary_offset_start","summary_start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topic","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_crc","uncompressed_size","uncompressed_size","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"q":["mcap","","","","mcap::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mcap::lexer::LexError","","","","","","","","","mcap::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mcap::parse::ParseError","","mcap::record_iterator","","","","","","","","","","","mcap::recordsmcap::records::OpCode","mcap::records::Record","","","","","","","","","","","","","",""],"d":["Includes functionality for reading MCAP records out of a …","Functions for parsing byte buffers into their MCAP record …","Ergonomic wrapper for reading and parsing records from a …","Struct definitions for all MCAP Records.","","","","","","","","Reads out of a <code>std::io::Read</code> implementation one record at …","","","","","","","","","","","if True, the resulting Lexer will not attempt to read or …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Lexer with default configuration values.","Reads the data for the next record from an MCAP into <code>data</code>. …","","","","","","","","","Sets a callback to be called when Attachment records are …","","","","","","","","","","","","Encompasses errors parsing MCAP records from raw bytes.","","Parses individual serialized values (not entire records) …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Parses a Parseable type from the front of the internal …","Parses a byte array that uses a 32-bit length. Since byte …","Parses a byte array that uses a 64-bit length. Since byte …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A wrapper for a <code>std::io::Read</code> implementation which parses …","","","Returns the argument unchanged.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,0,0,0,0,4,4,4,4,4,0,0,4,0,4,4,4,4,2,4,2,4,2,4,4,2,4,4,4,4,2,4,2,2,4,4,2,4,2,4,2,4,2,41,42,43,44,45,46,47,43,45,9,9,0,0,0,9,19,9,19,9,9,9,19,9,9,19,19,19,19,9,19,19,20,9,9,19,9,19,9,19,9,48,49,0,22,22,22,22,22,22,22,22,22,22,8,0,11,39,0,0,11,39,0,11,39,0,11,39,0,11,39,0,0,11,39,0,11,39,0,11,39,0,0,11,39,0,11,39,0,11,39,0,11,39,0,0,0,11,39,0,11,39,0,11,39,0,11,33,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,33,27,29,33,33,30,30,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,30,28,30,31,31,32,38,25,27,31,38,37,32,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,25,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,36,36,36,25,26,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,32,35,23,27,31,32,38,31,32,38,33,26,28,30,33,30,30,28,30,33,26,34,33,25,31,32,34,35,38,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,32,35,39,0,23,27,28,29,33,26,27,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,24,24,24,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,26,8,11,11,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,8,11,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,28,28,30,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]],3],[[2,[1]]]],[[4,5],6],[[4,5],6],[[]],[[]],[7,4],[8,4],[9,4],[[]],[[]],[1,[[2,[1]]]],[[[2,[1]],10],[[13,[[12,[11]],4]]]],[4,[[12,[14]]]],[[],15],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[[2,[1]],[17,[1]]],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[9,5],6],[[9,5],6],[[]],[[]],[18,9],[19,[[13,[20,9]]]],[19,[[13,[21,9]]]],[19,[[13,[21,9]]]],[[]],[[]],[19],[[],19],[[],[[13,[9]]]],[9,[[12,[14]]]],[[],15],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],0,0,0,[[]],[[]],[[]],[[]],[[]],[1,[[22,[1]]]],[[[22,[1]]],12],[[],13],[[],13],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[11,11],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[13,[11]]]],[[],[[13,[23]]]],[[],[[13,[24]]]],[[],[[13,[25]]]],[[],[[13,[26]]]],[[],[[13,[27]]]],[[],[[13,[28]]]],[[],[[13,[29]]]],[[],[[13,[30]]]],[[],[[13,[31]]]],[[],[[13,[32]]]],[[],[[13,[33]]]],[[],[[13,[34]]]],[[],[[13,[35]]]],[[],[[13,[36]]]],[[],[[13,[37]]]],[[],[[13,[38]]]],[[],[[13,[39]]]],0,[[11,11],3],[[23,23],3],[[24,24],3],[[25,25],3],[[26,26],3],[[27,27],3],[[28,28],3],[[29,29],3],[[30,30],3],[[31,31],3],[[32,32],3],[[33,33],3],[[34,34],3],[[35,35],3],[[36,36],3],[[37,37],3],[[38,38],3],[[39,39],3],[[11,5],6],[[23,5],6],[[24,5],6],[[25,5],6],[[26,5],6],[[27,5],6],[[28,5],6],[[29,5],6],[[30,5],6],[[31,5],6],[[32,5],6],[[33,5],6],[[34,5],6],[[35,5],6],[[36,5],6],[[37,5],6],[[38,5],6],[[39,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[24,24],[25,25],[26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34],[35,35],[36,36],[37,37],[38,38],[39,39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,11],3],[[23,23],3],[[24,24],3],[[25,25],3],[[26,26],3],[[27,27],3],[[28,28],3],[[29,29],3],[[30,30],3],[[31,31],3],[[32,32],3],[[33,33],3],[[34,34],3],[[35,35],3],[[36,36],3],[[37,37],3],[[38,38],3],[[39,39],3],0,0,[39,11],[11,[[13,[39,9]]]],0,0,0,0,0,0,0,[11,13],[23,13],[24,13],[25,13],[26,13],[27,13],[28,13],[29,13],[30,13],[31,13],[32,13],[33,13],[34,13],[35,13],[36,13],[37,13],[38,13],[39,13],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],[40,[[13,[11]]]],[[],13],[[],[[13,[23]]]],[[],13],[[],[[13,[24]]]],[[],13],[[],[[13,[25]]]],[[],13],[[],[[13,[26]]]],[[],13],[[],13],[[],[[13,[27]]]],[[],[[13,[28]]]],[[],13],[[],[[13,[29]]]],[[],13],[[],[[13,[30]]]],[[],13],[[],[[13,[31]]]],[[],13],[[],13],[[],[[13,[32]]]],[[],13],[[],[[13,[33]]]],[[],[[13,[34]]]],[[],13],[[],[[13,[35]]]],[[],13],[[],[[13,[36]]]],[[],13],[[],13],[[],[[13,[37]]]],[[],[[13,[38]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Read"],[3,"Lexer"],[15,"bool"],[4,"LexError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"InvalidOpcode"],[4,"ParseError"],[3,"Vec"],[4,"OpCode"],[4,"Option"],[4,"Result"],[8,"Error"],[3,"String"],[3,"TypeId"],[6,"AttachmentContentHandler"],[3,"Utf8Error"],[3,"Parser"],[8,"Parseable"],[4,"Cow"],[3,"RecordIterator"],[3,"Header"],[3,"Footer"],[3,"Schema"],[3,"Channel"],[3,"Message"],[3,"Chunk"],[3,"MessageIndex"],[3,"ChunkIndex"],[3,"Attachment"],[3,"AttachmentIndex"],[3,"Statistics"],[3,"Metadata"],[3,"MetadataIndex"],[3,"SummaryOffset"],[3,"DataEnd"],[3,"AttachmentHeader"],[4,"Record"],[15,"u8"],[13,"IO"],[13,"ParseError"],[13,"TruncatedMidRecord"],[13,"InvalidStartMagic"],[13,"RecordTooLargeForArchitecture"],[13,"UnrecognizedCompression"],[13,"InvalidOpcode"],[13,"StringEncoding"],[13,"OpCodeNotImplemented"],[13,"UserOpcode"],[13,"Header"],[13,"Footer"],[13,"Schema"],[13,"Channel"],[13,"Message"],[13,"Chunk"],[13,"MessageIndex"],[13,"ChunkIndex"],[13,"Attachment"],[13,"AttachmentIndex"],[13,"Statistics"],[13,"Metadata"],[13,"MetadataIndex"],[13,"SummaryOffset"],[13,"DataEnd"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
