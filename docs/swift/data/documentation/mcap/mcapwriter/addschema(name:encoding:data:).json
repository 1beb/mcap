{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addSchema","kind":"identifier"},{"text":"(","kind":"text"},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"encoding","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Data","preciseIdentifier":"s:10Foundation4DataV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SchemaID","identifier":"doc:\/\/MCAP\/documentation\/MCAP\/SchemaID","preciseIdentifier":"s:4MCAP8SchemaIDa","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]}],"metadata":{"modules":[{"name":"MCAP"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addSchema"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoding"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SchemaID","preciseIdentifier":"s:4MCAP8SchemaIDa"}],"roleHeading":"Instance Method","externalID":"s:4MCAP10MCAPWriterC9addSchema4name8encoding4datas6UInt16VSS_SS10Foundation4DataVtYaF","title":"addSchema(name:encoding:data:)","symbolKind":"method"},"variants":[{"paths":["\/documentation\/mcap\/mcapwriter\/addschema(name:encoding:data:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"abstract":[{"text":"No overview available.","type":"text"}],"identifier":{"url":"doc:\/\/MCAP\/documentation\/MCAP\/MCAPWriter\/addSchema(name:encoding:data:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/MCAP\/documentation\/MCAP","doc:\/\/MCAP\/documentation\/MCAP\/MCAPWriter"]]},"sections":[],"references":{"doc://MCAP/documentation/MCAP/MCAPWriter":{"abstract":[{"text":"A writer that produces MCAP files, with options to enable compression for smaller files and indexes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for more efficient reading."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MCAPWriter"}],"title":"MCAPWriter","url":"\/documentation\/mcap\/mcapwriter","navigatorTitle":[{"kind":"identifier","text":"MCAPWriter"}],"identifier":"doc:\/\/MCAP\/documentation\/MCAP\/MCAPWriter","role":"symbol","type":"topic"},"doc://MCAP/documentation/MCAP":{"identifier":"doc:\/\/MCAP\/documentation\/MCAP","url":"\/documentation\/mcap","kind":"symbol","abstract":[{"type":"text","text":"Read and write log files containing heterogeneous timestamped data."}],"role":"collection","title":"MCAP","type":"topic"},"doc://MCAP/documentation/MCAP/SchemaID":{"abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SchemaID"}],"title":"SchemaID","url":"\/documentation\/mcap\/schemaid","navigatorTitle":[{"kind":"identifier","text":"SchemaID"}],"identifier":"doc:\/\/MCAP\/documentation\/MCAP\/SchemaID","role":"symbol","type":"topic"},"doc://MCAP/documentation/MCAP/MCAPWriter/addSchema(name:encoding:data:)":{"type":"topic","role":"symbol","url":"\/documentation\/mcap\/mcapwriter\/addschema(name:encoding:data:)","abstract":[],"identifier":"doc:\/\/MCAP\/documentation\/MCAP\/MCAPWriter\/addSchema(name:encoding:data:)","title":"addSchema(name:encoding:data:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addSchema"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoding"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SchemaID","preciseIdentifier":"s:4MCAP8SchemaIDa"}]}}}